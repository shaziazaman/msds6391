PImage img;
PImage croppedimg;

String apiKey = "9Ihs7mZs2OkFpVeNHaRF76mnDZ02lOSZoe2NIeeh";
String apiUrl = "https://api.nasa.gov/EPIC/api/natural/images?api_key=" + apiKey;
  String imageType = "natural";
  String imageFileType = "png";
  String imageFileName = "epic_1b_20170510190006_02";
  String imageFileYear = "2017";
  String imageFileMonth = "05";
  String imageFileDay = "10";
  String imageUrl = "https://api.nasa.gov/EPIC/archive/" + imageType + "/" +
      imageFileYear + "/" + imageFileMonth + "/" + imageFileDay + "/" +
      imageFileType + "/" + imageFileName + "." + imageFileType + 
      "?api_key=" + apiKey;
  

void setup() {
  size(3500,8000);
  img = loadImage(imageUrl);
  croppedimg = cropImageCircle(img,1000,1000,1500);
  croppedimg.resize(2*width/3,2*height/3);
}

void draw() {
  image(croppedimg,width/6,height/6);
}

void mousePressed() {
  println("curveVertex("+mouseX +", "+mouseY+ ");");
 
}

PImage cropImageCircle(final PImage inputImg, final int cx, final int cy, int diam) {
  final int rad = (diam = abs(diam))>>1, radSq = rad*rad;
 
  final color[] p = inputImg.pixels;
  final int w = inputImg.width, h = inputImg.height;
  //final int cx = w>>1, cy = h>>1;
 
  final PImage outputImg = createImage(diam, diam, ARGB);
  final color[] q = outputImg.pixels;
 
  final int minX = max(cx - rad, 0);
  final int maxX = min(cx + rad, w);
 
  final int minY = max(cy - rad, 0);
  final int maxY = min(cy + rad, h);
 
  for (int y = minY; y < maxY;) {
    final float cySq = sq(cy - y);
    final int rw1 = w*y, rw2 = diam*(y++ - minY);
 
    for (int x = minX; x < maxX; x++)
      if (sq(cx - x) + cySq <= radSq)  q[rw2 + x - minX] = p[rw1 + x];
  }
 
  outputImg.updatePixels();
  return outputImg;
}
